security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            chain:
                providers: ['user_provider_1', 'user_provider_2']

        user_provider_1:
            entity:
                class: App\Entity\Student
                property: email

        user_provider_2:
            entity:
                class: App\Entity\Teacher
                property: email

    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                username_path: email
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt:
                provider: app_user_provider
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false  

        main:
            logout:
                path: api_logout
              

    role_hierarchy:
        ROLE_STUDENT: ROLE_USER
        ROLE_TEACHER: ROLE_USER
        ROLE_ADMIN: [ROLE_STUDENT, ROLE_TEACHER]

    # Easy way to control access for large sections of your site
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        #- { path: ^/api/crud/, roles: ROLE_ADMIN}



